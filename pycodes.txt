1. Write a Python program to merge two text files and also count the number of lines in the merged text file.
file1 = "D:\\python\\file1.txt"
file2 = "D:\\python\\file2.txt"
merged_file = "D:\\python\\mergedfile.txt"

with open(file1, 'r') as f1, open(file2, 'r') as f2, open(merged_file, 'w') as merged:
    merged.write(f1.read())
    merged.write(f2.read())

with open(merged_file, 'r') as merged:
    line_count = sum(1 for line in merged)

print(f'Number of lines in the merged file: {line_count}')

2. Create a class STORE to keep track of products (Product Code, Name and price). Display the menu of all products to the user. Generate bill as per order
class Store:
    def __init__(self):
        self.products = {'001': {'name': 'Product1', 'price': 10},
                         '002': {'name': 'Product2', 'price': 20},
                         '003': {'name': 'Product3', 'price': 30}}

    def display_menu(self):
        print("Product Code\tProduct Name\tPrice")
        for code, details in self.products.items():
            print(f"{code}\t\t{details['name']}\t\t{details['price']}")

    def generate_bill(self, predefined_order):
        order_details = {}

        for product_code, quantity in predefined_order.items():
            details = self.products.get(product_code)

            if details:
                order_details[product_code] = {'name': details['name'], 'price': details['price'], 'quantity': quantity}
            else:
                print(f"Invalid product code: {product_code}")

        total_price = sum(item['price'] * item['quantity'] for item in order_details.values())

        print("\nBill:")
        print("Product Code\tProduct Name\tPrice\tQuantity")
        for code, details in order_details.items():
            print(f"{code}\t\t\t\t{details['name']}\t\t{details['price']}\t\t{details['quantity']}")

        print(f"Total Price: {total_price}")


# Example usage with predefined order
predefined_order = {'001': 2, '002': 1}
store = Store()
store.display_menu()
store.generate_bill(predefined_order)


#runtime
class Store:
    def __init__(self):
        self.products = {'001': {'name': 'Product1', 'price': 10},
                         '002': {'name': 'Product2', 'price': 20},
                         '003': {'name': 'Product3', 'price': 30}}

    def display_menu(self):
        print("Product Code\tProduct Name\tPrice")
        for code, details in self.products.items():
            print(f"{code}\t\t{details['name']}\t\t{details['price']}")

    def generate_bill(self):
        order_details = {}

        while True:
            product_code = input("Enter product code (or 'done' to finish): ")

            if product_code.lower() == 'done':
                break

            quantity = int(input(f"Enter quantity for product {product_code}: "))

            details = self.products.get(product_code)

            if details:
                order_details[product_code] = {'name': details['name'], 'price': details['price'], 'quantity': quantity}
            else:
                print(f"Invalid product code: {product_code}")

        total_price = sum(item['price'] * item['quantity'] for item in order_details.values())

        print("\nBill:")
        print("Product Code\tProduct Name\tPrice\tQuantity")
        for code, details in order_details.items():
            print(f"{code}\t\t\t\t{details['name']}\t\t{details['price']}\t\t{details['quantity']}")

        print(f"Total Price: {total_price}")


# Example usage
store = Store()
store.display_menu()
store.generate_bill()

3. Write a Python program to sort a list of elements using the selection sort algorithm
def selection_sort(arr):
    n = len(arr)

    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j

        arr[i], arr[min_index] = arr[min_index], arr[i]

# Accept a list from the user
user_input = input("Enter a list of numbers separated by spaces: ")
my_list = [int(num) for num in user_input.split()]

# Use the selection_sort function to sort the list
selection_sort(my_list)

# Print the sorted list
print("Sorted list using selection sort:", my_list)

4. Write a Python class that has two methods get_string and print_string. Get_string accept a string from the user and print_string print the string in upper case.
class StringManipulator:
    def __init__(self):
        self.my_string = ""

    def get_string(self):
        self.my_string = input("Enter a string: ")

    def print_string(self):
        print("Uppercase String:", self.my_string.upper())


# Example Usage:
str_manipulator = StringManipulator()
str_manipulator.get_string()
str_manipulator.print_string()




5. Write a python program to count repeated characters in a string 
def count_repeated_characters(input_string):
    char_count = {}
    for char in input_string:
        if char.isalpha():
            char = char.lower()
            char_count[char] = char_count.get(char, 0) + 1

    for char, count in char_count.items():
        print(f"{char}: {count}")


# Example Usage:
sample_string = (input("Enter the string"))
print("Repeated character count:")
count_repeated_characters(sample_string)

6. Print the pyramid
 *
*   *
*   *    *
      AND
       Print the pattern
       *    *    *
       *    *    *
       *    *    * 
# Pyramid
def print_pyramid(rows):
    for i in range(1, rows + 1):
        print("* " * i)


# Pattern
def print_pattern(rows):
    for i in range(rows, 0, -1):
        print("* " * i)


# Example Usage:
print("Pyramid:")
print_pyramid(3)

print("\nPattern:")
print_pattern(3)
7. Print the pyramid
1
1   2
1   2    3

def print_number_pyramid(rows):
    for i in range(1, rows + 1):
        for j in range(1, i + 1):
            print(j, end=" ")
        print()


# Example Usage:
print("Number Pyramid:")
print_number_pyramid(3)

8. Write a python program to print the alphabet pattern ‘O’ and the pattern ‘P’
def print_pattern_O():
    print("***")
    for i in range(5):
        print("*  *")
    print("***")

def print_pattern_P():
    print("****")
    for i in range(3):
        print("*   *")
    print("****")
    for i in range(3):
        print("*")

# Print pattern 'O'
print("Pattern 'O':")
print_pattern_O()

# Print pattern 'P'
print("\nPattern 'P':")
print_pattern_P()

9. Create an EMPLOYEE class for storing details(Name, Designation, gender, date of joining and salary).Define function members to compute
class EMPLOYEE:
    total_employees = 0
    male_count = 0
    female_count = 0
    high_salary_count = 0
    manager_count = 0

    def __init__(self, name, designation, gender, join_date, salary):
        self.name = name
        self.designation = designation
        self.gender = gender
        self.join_date = join_date
        self.salary = salary
        EMPLOYEE.total_employees += 1
        if gender.lower() == 'male':
            EMPLOYEE.male_count += 1
        elif gender.lower() == 'female':
            EMPLOYEE.female_count += 1
        if salary > 10000:
            EMPLOYEE.high_salary_count += 1
        if designation.lower() == 'manager':
            EMPLOYEE.manager_count += 1

# Function to accept employee details from the user
def get_employee_details():
    name = input("Enter employee name (or 'done' to finish): ")

    if name.lower() == 'done':
        return None

    designation = input("Enter employee designation: ")
    gender = input("Enter employee gender: ")
    join_date = input("Enter employee join date (YYYY-MM-DD): ")
    salary = float(input("Enter employee salary: "))
    return EMPLOYEE(name, designation, gender, join_date, salary)

# Example Usage:
employees = []

while True:
    employee = get_employee_details()
    if employee is None:
        break
    employees.append(employee)

print("\nEmployee Details:")
print("Total Employees:", EMPLOYEE.total_employees)
print("Male Employees:", EMPLOYEE.male_count)
print("Female Employees:", EMPLOYEE.female_count)
print("Employees with Salary > 10,000:", EMPLOYEE.high_salary_count)
print("Managers:", EMPLOYEE.manager_count)




10. Write a Python program to construct the following pattern using a nested loop
*
*   *
*   *    *
*   *    *    *   
*   *    *    *    *
*   *    *    *   
*   *    *
*   *
*
rows = 5

# Upper half of the pattern
for i in range(0, rows):
    for j in range(0, i + 1):
        print("* ", end="")
    print("")

# Lower half of the pattern
for i in range(rows, 0, -1):
    for j in range(0, i - 1):
        print("* ", end="")
    print("")

11. Given two lists create a third list by picking an odd-index element from the first list and even index elements from the second
def create_third_list(list1, list2):
    odd_index_elements = list1[1::2]  # Picks odd-index elements from the first list
    even_index_elements = list2[0::2]  # Picks even-index elements from the second list
    third_list = odd_index_elements + even_index_elements  # Concatenates both extracted lists
    return third_list

# Taking user input for the two lists
input_list1 = input("Enter elements for the first list separated by spaces: ").split()
input_list2 = input("Enter elements for the second list separated by spaces: ").split()

# Converting input elements to integers
list1 = [int(x) for x in input_list1]
list2 = [int(x) for x in input_list2]

result_list = create_third_list(list1, list2)
print("Third List:", result_list)




12. a. Write a program to print each line of a text file in reverse order
b. Print the substring from the input string “Vishwakarma University” from index 2 to 14
with open("D:\\python\\file1.txt", 'r') as file:
    lines = file.readlines()
    reversed_lines = [line.strip()[::-1] for line in lines]

print("Lines in Reverse Order:")
for line in reversed_lines:
    print(line)

input_string = "Vishwakarma University"
substring = input_string[2:15]
print("Substring:", substring)

13. Write a Pandas program to add, subtract, multiple and divide two Pandas Series. 
Sample Series: [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]
!pip install pandas
import pandas as pd

series1 = pd.Series([2, 4, 6, 8, 10])
series2 = pd.Series([1, 3, 5, 7, 9])

add_result = series1 + series2
subtract_result = series1 - series2
multiply_result = series1 * series2
divide_result = series1 / series2

print("Addition Result:")
print(add_result)
print("\nSubtraction Result:")
print(subtract_result)
print("\nMultiplication Result:")
print(multiply_result)
print("\nDivision Result:")
print(divide_result)

14. Write a Pandas program to sort a given Series. 

Original Data Series: 

0 100
1 200
2 python
3 300.12
4 400
dtype: object
import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print("Original Data Series:")
print(s)
new_s = pd.Series(s).sort_values()
print(new_s)

15. Write a Pandas program to select the 'name' and 'score' columns from the following DataFrame.
Sample Python dictionary data and list labels:

import pandas as pd
import numpy as np

# Sample data and labels
exam_data = {
    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
    'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']
}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

# Creating a DataFrame
df = pd.DataFrame(exam_data, index=labels)

# Selecting 'name' and 'score' columns
selected_columns = df[['name', 'score']]

print("Selected Columns 'name' and 'score':")
print(selected_columns)

16.  Write a Python program to print alphabet pattern 'R' and pattern’O’ 
def print_pattern_R():
    for i in range(7):
        for j in range(6):
            if (j == 0) or ((i == 0 or i == 3) and (j < 5)) or ((0 < i < 3 or i >= 3) and (j == 5)):
                print("*", end='')
            else:
                print(" ", end='')
        print()

# Print the 'R' pattern
print_pattern_R()

def print_pattern_O():
    print(" *** ")
    for i in range(5):
        print("*   *")
    print(" *** ")

# Print pattern 'O'
print("Pattern 'O':")
print_pattern_O()

17. Write a Python program that matches a word containing 'z', not at the start or end of the word and match a string that contains only upper and lowercase letters, numbers, and underscores by using function

import re

def match_z_word(word):
    pattern = r'\b[^zZ]\w*z\w*[^zZ]\b'
    return re.search(pattern, word) is not None

def match_alphanumeric_underscore(string):
    pattern = r'^[a-zA-Z0-9_]+$'
    return re.search(pattern, string) is not None

# Take input from the user
user_word = input("Enter a word: ")
user_string = input("Enter a string: ")

# Match a word containing 'z', not at the start or end of the word
result_word = match_z_word(user_word)
print(f"Word '{user_word}' contains 'z', not at start or end: {result_word}")

# Match a string with only upper/lowercase letters, numbers, and underscores
result_string = match_alphanumeric_underscore(user_string)
print(f"String '{user_string}' contains only valid characters: {result_string}")

18. Write a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle.
class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def calculate_area(self):
        return self.length * self.width

# Taking user input for length and width of the rectangle
length = int(input("Enter the length of the rectangle: "))
width = int(input("Enter the width of the rectangle: "))

# Creating a rectangle object
my_rectangle = Rectangle(length, width)

# Calculating the area of the rectangle
area = my_rectangle.calculate_area()
print(f"The area of the rectangle with length {length} and width {width} is: {area}")

19. To calculate salary of an employee given his basic pay (take as input from user). Calculate gross salary of employee. Let HRA be 10 % of basic pay and TA be 5% of basic pay. Let employee pay professional tax as 2% of total salary. Calculate net salary payable after deductions.
def calculate_salary(basic_pay):
    HRA = 0.1 * basic_pay  # 10% of basic pay
    TA = 0.05 * basic_pay  # 5% of basic pay
    gross_salary = basic_pay + HRA + TA

    professional_tax = 0.02 * gross_salary  # 2% of total salary
    net_salary = gross_salary - professional_tax

    return gross_salary, net_salary

# Taking user input for basic pay
basic_pay = float(input("Enter the basic pay of the employee: "))

# Calculating gross and net salary
gross, net = calculate_salary(basic_pay)

# Displaying the results
print(f"Gross Salary: {gross}")
print(f"Net Salary (after deductions): {net}")

20. Find the factorial of a number by using function. Accept a number from user and reverse the number by using function.
def calculate_factorial(number):
    factorial = 1
    if number < 0:
        return "Factorial does not exist for negative numbers."
    elif number == 0:
        return 1
    else:
        for i in range(1, number + 1):
            factorial *= i
        return factorial
def reverse_number(number):
    reversed_num = int(str(number)[::-1])
    return reversed_num
# Taking user input for a number
num = int(input("Enter a number to find the factorial: "))

# Calculating factorial
factorial = calculate_factorial(num)
print(f"The factorial of {num} is: {factorial}")

num = int(input("Enter a number to reverse it : "))
# Reversing the number
reversed_num = reverse_number(num)
print(f"The reverse of {num} is: {reversed_num}")

21. Write a Python program to count the number of words in a sentence

# Taking user input for a sentence
sentence = input("Enter a sentence: ")

# Split the sentence into words using whitespace as the delimiter
words = sentence.split()

# Count the number of words
word_count = len(words)

# Print the result
print(f"The number of words in the sentence is: {word_count}")

22. Write a Python program to add, multiply two matrices using numpy

import numpy as np

# Define two matrices
matrix1 = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])

matrix2 = np.array([[9, 8, 7],
                    [6, 5, 4],
                    [3, 2, 1]])

# Matrix addition
matrix_sum = np.add(matrix1, matrix2)
print("Matrix Addition:")
print(matrix_sum)

# Matrix multiplication
matrix_product = np.dot(matrix1, matrix2)
print("\nMatrix Multiplication:")
print(matrix_product)

23. Write a Python program to count number of characters, words, spaces and lines in a file.
file_path = "D:\\python\\mergedfile.txt"
 
with open(file_path, 'r') as file:
    content = file.read()
 
char_count = len(content)
word_count = len(content.split())
space_count = content.count(' ')
line_count = content.count('\n') + 1
 
print("Number of Characters:", char_count)
print("Number of Words:", word_count)
print("Number of Spaces:", space_count)
print("Number of Lines:", line_count)

24. a) Write a program that matches a word containing ‘z’.
b) Write a program that matches a string that has an a followed by zero or more b’s.
import re
def match_word_with_z(word):
    pattern = re.compile(r'\b\w*z\w*\b')
    return bool(pattern.search(word))

# Example usage:
word_to_check = input("enter a word")
if match_word_with_z(word_to_check):
    print(f'The word "{word_to_check}" contains the letter "z".')
else:
    print(f'The word "{word_to_check}" does not contain the letter "z".')
    
def match_a_followed_by_bs(s):
    pattern = re.compile(r'a+b*')
    return bool(pattern.search(s))

# Example usage:
input_string = input("Enter a string: ")

if match_a_followed_by_bs(input_string):
    print(f'The string "{input_string}" contains an "a" followed by zero or more "b"s.')
else:
    print(f'The string "{input_string}" does not contain the pattern.')
25. Write a program that accepts a list from user and print the alternate element of list.
user_list = input("Enter elements of the list separated by spaces: ").split()
alternate_elements = user_list[::2]
print("Alternate Elements of the List:", alternate_elements)







26. Write a program that reads an integer value n from the user, and then produces n lines of output. The first line contains 1 star, the second 2 stars, and so on until the last line, which should have n stars. Can you write this using only a single loop?
n = int(input("Enter a size: "))
 
for i in range(1, n + 1):
    print('+' * i)

27. Sort following NumPy array
Case 1: Sort array by the second row
Case 2: Sort the array by the second column
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]])
import numpy as np
 
sample_array = np.array([[34, 43, 73], [82, 22, 12], [53, 94, 66]])
 
# Case 1: Sort array by the second row
sorted_array_case1 = sample_array[:, sample_array[1, :].argsort()]
 
# Case 2: Sort the array by the second column
sorted_array_case2 = sample_array[sample_array[:, 1].argsort()]
 
print("Sorted Array by Second Row:")
print(sorted_array_case1)
print("\nSorted Array by Second Column:")
print(sorted_array_case2)

28. Take two input strings, concatenate them, and print the output. Also, Reverse the string and print it.

# Take two input strings from the user
string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")

# Concatenate the strings
concatenated_string = string1 + string2

# Reverse the concatenated string
reversed_string = concatenated_string[::-1]

# Print the concatenated and reversed strings
print("\nConcatenated String:", concatenated_string)
print("Reversed String:", reversed_string)

29. Write a Python program to find maximum and minimum K elements in Tuple. Take user input for K.
# Take user input for K
K = int(input("Enter the value of K: "))

# Take user input for the tuple elements
tuple_elements = tuple(map(int, input("Enter the tuple elements separated by spaces: ").split()))

# Check if K is valid
if 0 <= K <= len(tuple_elements):
    # Find the maximum and minimum K elements
    max_K_elements = tuple(sorted(tuple_elements, reverse=True)[:K])
    min_K_elements = tuple(sorted(tuple_elements)[:K])

    # Display the results
    print(f"Maximum {K} elements: {max_K_elements}")
    print(f"Minimum {K} elements: {min_K_elements}")
else:
    print("Invalid value of K. K should be between 0 and the length of the tuple.")

30. Write a python program to search some literals strings in a string from a file.
Sample text : “the quick brown fox jumps over the lazy dog”
Searched words : “fox”,”dog”,”horse”

file_path = "D:\\python\\mergedfile.txt"
searched_words = ["fox", "dog", "horse"]
 
with open(file_path, 'r') as file:
    text = file.read()
 
for word in searched_words:
    if word in text:
        print(f"{word} found in the text.")
    else:
        print(f"{word} not found in the text.")

31. Write a python program to check whether a string contains all letters of the alphabet

def contains_all_letters(input_string):
    # Convert the input string to lowercase to handle both uppercase and lowercase letters
    input_string_lower = input_string.lower()

    # Check if all letters of the alphabet are present in the string
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    for char in alphabet:
        if char not in input_string_lower:
            return False

    return True

# Take user input for a string
user_input = input("Enter a string: ")

# Check if the string contains all letters of the alphabet
result = contains_all_letters(user_input)

# Print the result
if result:
    print("The string contains all letters of the alphabet.")
else:
    print("The string does not contain all letters of the alphabet.")

32. Write a Python class to implement pow(x,n)
 
class PowerCalculator:
    def calculate_power(self, x, n):
        # Base case: x^0 = 1
        if n == 0:
            return 1

        # Negative exponent case: x^(-n) = 1 / (x^n)
        if n < 0:
            x = 1 / x
            n = -n

        result = 1
        current_product = x

        while n > 0:
            if n % 2 == 1:
                result *= current_product
            current_product *= current_product
            n //= 2

        return result

# Take user input for base (x) and exponent (n)
x = int(input("Enter the base (x): "))
n = int(input("Enter the exponent (n): "))

# Create an instance of PowerCalculator
power_calculator = PowerCalculator()

# Calculate and print the result
result = power_calculator.calculate_power(x, n)
print(f"{x}^{n} = {result}")



33. Write a Python program to swap two elements in a list. Take user input for the swap index

user_list = input("Enter elements of the list separated by spaces: ").split()
print("Original List:", user_list)
 
index1 = int(input("Enter the index of the first element to swap: "))
index2 = int(input("Enter the index of the second element to swap: "))
 
user_list[index1], user_list[index2] = user_list[index2], user_list[index1]
print("List after swapping elements:", user_list)

34. Write a Python program to create a file where all letters of the English alphabet are listed by a specified number of letters on each line

file_path = "D:\\python\\mergedfile.txt"
letters_per_line = 5

with open(file_path, 'w') as file:
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    for i in range(0, len(alphabet), letters_per_line):
        line = alphabet[i:i+letters_per_line]
        file.write(line + '\n')

print(f"Alphabet file created at: {file_path}")

35. Generate two lists of random data and create a scatter plot to visualize their relationship. Label the axes 
import matplotlib.pyplot as plt
import numpy as np
 
# Generate random data
data1 = np.random.rand(10)
data2 = np.random.rand(10)
 
# Create a scatter plot
plt.scatter(data1, data2)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot')
plt.show()

36. Write a Python program that calculates basic statistical operations, including mean, median, and standard deviation, on a given NumPy array
import numpy as np

def calculate_statistics(data):
    mean_value = np.mean(data)
    median_value = np.median(data)
    std_deviation = np.std(data)
    return mean_value, median_value, std_deviation

# Example Usage:
try:
    # Accept input from the user for the array (comma-separated numbers)
    input_values = input("Enter an array of numbers (comma-separated): ")
    data_array = np.array([float(x) for x in input_values.split(",")])
except ValueError as e:
    print(f"Error: {e}")
    exit()

# Calculate and print statistics
mean, median, std_dev = calculate_statistics(data_array)
print(f"\nArray: {data_array}")
print(f"Mean: {mean}")
print(f"Median: {median}")
print(f"Standard Deviation: {std_dev}")

37. Design a class hierarchy for a restaurant management system. Define the relevant attributes and methods for the classes.

class Dish:
    def __init__(self, dish_name, price, cuisine_type):
        self.dish_name = dish_name
        self.price = price
        self.cuisine_type = cuisine_type

    def display_info(self):
        print(f"{self.dish_name} - ${self.price:.2f} ({self.cuisine_type} cuisine)")

class Appetizer(Dish):
    def __init__(self, dish_name, price, cuisine_type, serving_size):
        super().__init__(dish_name, price, cuisine_type)
        self.serving_size = serving_size

    def display_info(self):
        super().display_info()
        print(f"Serving Size: {self.serving_size} pieces")

class VegetarianAppetizer(Appetizer):
    def __init__(self, dish_name, price, serving_size):
        super().__init__(dish_name, price, cuisine_type="Vegetarian", serving_size=serving_size)

# Example Usage:
dish1 = Dish("Pasta Carbonara", 15.99, "Italian")
dish2 = Appetizer("Spinach Artichoke Dip", 8.99, "American", serving_size=10)
dish3 = VegetarianAppetizer("Vegetable Spring Rolls", 7.99, serving_size=8)

# Display information for each dish
print("Dish 1:")
dish1.display_info()

print("\nDish 2:")
dish2.display_info()

print("\nDish 3:")
dish3.display_info()

38. Write a Python function to create and print a list where the values are square of numbers between 1 and 30 (both included)
def generate_square_list(start, end):
    square_list = [x**2 for x in range(start, end + 1)]
    return square_list

# Take user input for the range
start_range = int(input("Enter the start of the range: "))
end_range = int(input("Enter the end of the range: "))

# Call the function with user input and print the result
result_list = generate_square_list(start_range, end_range)
print(result_list)

39. Design a class hierarchy for a ticket booking management system. Define the relevant attributes and methods for the classes.

class Ticket:
    def __init__(self, ticket_id, event_name, price, quantity_available):
        self.ticket_id = ticket_id
        self.event_name = event_name
        self.price = price
        self.quantity_available = quantity_available
 
    def display_info(self):
        print(f"Ticket ID: {self.ticket_id}")
        print(f"Event Name: {self.event_name}")
        print(f"Price: ${self.price:.2f}")
        print(f"Quantity Available: {self.quantity_available}")
 
    def reserve_tickets(self, quantity):
        if quantity <= 0 or quantity > self.quantity_available:
            print("Invalid quantity. Please enter a valid quantity.")
        else:
            self.quantity_available -= quantity
            print(f"Successfully reserved {quantity} tickets for {self.event_name}.")
 
class MovieTicket(Ticket):
    def __init__(self, ticket_id, movie_name, show_time, price, quantity_available):
        super().__init__(ticket_id, event_name=f"Movie: {movie_name} ({show_time})", price=price, quantity_available=quantity_available)
        self.movie_name = movie_name
        self.show_time = show_time
 
class ConcertTicket(Ticket):
    def __init__(self, ticket_id, artist_name, concert_date, price, quantity_available):
        super().__init__(ticket_id, event_name=f"Concert: {artist_name} ({concert_date})", price=price, quantity_available=quantity_available)
        self.artist_name = artist_name
        self.concert_date = concert_date
 
class BookingSystem(Ticket):
    def __init__(self, ticket_id, event_name, price, quantity_available, booking_limit):
        super().__init__(ticket_id, event_name, price, quantity_available)
        self.booking_limit = booking_limit
 
    def make_booking(self, quantity):
        if quantity <= 0 or quantity > self.booking_limit:
            print("Invalid booking quantity. Please enter a valid quantity.")
        else:
            self.reserve_tickets(quantity)
            print(f"Booking confirmed for {quantity} tickets.")
 
# Example Usage:
movie_ticket = MovieTicket(1, "Inception", "19:00", 12.50, 100)
concert_ticket = ConcertTicket(2, "Coldplay", "2023-03-15", 40.00, 50)
 
# Display ticket information
print("Movie Ticket Info:")
movie_ticket.display_info()
 
print("\nConcert Ticket Info:")
concert_ticket.display_info()
 
# Booking System Example
booking_system = BookingSystem(3, "Special Event", 25.00, 200, booking_limit=5)
booking_system.make_booking(1)
40. Write a Python program to shuffle the elements of a given list
import random
 
user_list = input("Enter elements of the list separated by spaces: ").split()
random.shuffle(user_list)
print("Shuffled List:", user_list)

41. Calculate the number of days between the two given dates
from datetime import datetime
 
date_format = "%Y-%m-%d"
 
date1 = input("Enter the first date (YYYY-MM-DD): ")
date2 = input("Enter the second date (YYYY-MM-DD): ")
 
delta = datetime.strptime(date2, date_format) - datetime.strptime(date1, date_format)
print("Number of days between the two dates:", delta.days)

42. Write a program to count no. of vowels in a string
user_string = input("Enter a string: ")
vowel_count = sum(1 for char in user_string.lower() if char in 'aeiou')
print("Number of vowels in the string:", vowel_count)

43. Create a result array by adding the following two NumPy arrays. Next, modify the result array by calculating the square of each element. Also generate the transposition of an array using the tool numpy
import numpy as np

# Function to take a matrix (2D array) as input from the user
def get_user_matrix(prompt):
    rows = int(input(f"Enter the number of rows for {prompt}: "))
    columns = int(input(f"Enter the number of columns for {prompt}: "))

    matrix = []
    for i in range(rows):
        row = [float(x) for x in input(f"Enter space-separated values for row {i + 1}: ").split()]
        matrix.append(row)

    return np.array(matrix)

# Get arrays from the user
array1 = get_user_matrix("Array 1")
array2 = get_user_matrix("Array 2")

# Add the two arrays
result_array = array1 + array2

# Calculate the square of each element in the result array
result_array_squared = np.square(result_array)

# Generate the transposition of the result array
result_array_transposed = np.transpose(result_array)

# Print the results
print("Original Arrays:")
print(array1)
print(array2)

print("\nResult Array (sum of arrays):")
print(result_array)

print("\nResult Array Squared:")
print(result_array_squared)

print("\nTransposition of Result Array:")
print(result_array_transposed)

44. Write a python program to copy one file to another file and the first two lines from the copied file.
with open('source_file.txt', 'r') as source_file, open('destination_file.txt', 'w') as destination_file:
    content = source_file.read()
    destination_file.write(content)
 
with open('destination_file.txt', 'r') as copied_file:
    first_two_lines = copied_file.readlines()[:2]
    print("First Two Lines from Copied File:")
    for line in first_two_lines:
        print(line.strip())

45. Write a python program to check how many times a given number can be divided by 3 before it is less than or equal to 10.
number = int(input("Enter a number: "))
count = 0
 
while number > 10:
    number /= 3
    count += 1
 
print(f"The given number can be divided by 3, {count}times before it is less than or equal to 10.")
